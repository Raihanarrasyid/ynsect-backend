// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  phone     String    @unique
  address   String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  carts     Cart[]
  orders    Order[]
  forums    Forum[]
  comments  Comment[]
  saved     Saved[]
  likes     Like[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cart        Cart[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  totalPrice Int
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Forum {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  saved     Saved[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  forumId   Int
  forum     Forum    @relation(fields: [forumId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Saved {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  forumId   Int
  forum     Forum    @relation(fields: [forumId], references: [id])
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  forumId   Int
  forum     Forum    @relation(fields: [forumId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
